# =============================================================================
# BACKEND ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit .env files to version control

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
# Port for the backend server to run on
PORT=5000

# Environment mode (development, production, test)
NODE_ENV=development

# Base URL for the backend API (used for internal API calls)
BASE_URL=http://localhost:5000

# Frontend URL for CORS and redirects
FRONTEND_URL=http://localhost:5173

# CORS origin (use * for all origins in development, specific domain in production)
CORS_ORIGIN=*

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# MongoDB connection string
# Format: mongodb://username:password@host:port/database
# For MongoDB Atlas: mongodb+srv://username:password@cluster.mongodb.net/database
MONGO_URI=mongodb://localhost:27017/marcel-expenses

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================
# JWT secret key for token signing (use a strong, random string)
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=your_super_secure_jwt_secret_key_here_minimum_32_characters

# JWT token expiration time (e.g., 30d, 7d, 24h)
JWT_EXPIRE=30d

# JWT cookie expiration in days
JWT_COOKIE_EXPIRE=30

# Internal API token for server-to-server communication
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
API_INTERNAL_TOKEN=your_internal_api_token_here

# =============================================================================
# GOOGLE SERVICES
# =============================================================================
# Google Maps API Key for location services and distance calculations
# Get from: https://developers.google.com/maps/documentation/javascript/get-api-key
# Required APIs: Maps JavaScript API, Geocoding API, Distance Matrix API
GOOGLE_MAPS_API_KEY=your_google_maps_api_key_here

# Google Gemini AI API Key for AI-powered features
# Get from: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=your_gemini_api_key_here

# =============================================================================
# EMAIL CONFIGURATION
# =============================================================================
# Email service configuration for sending notifications
# SMTP server settings
EMAIL_USERNAME=your_email@example.com
EMAIL_PASSWORD=your_email_password_or_app_password

# Email sender information
FROM_NAME=Marcel Expenses
FROM_EMAIL=noreply@marcel-expenses.com

# =============================================================================
# BUSINESS LOGIC CONFIGURATION
# =============================================================================
# Default cost per kilometer for mileage calculations (in your local currency)
DEFAULT_COST_PER_KM=0.70

# =============================================================================
# DEVELOPMENT & DEBUGGING
# =============================================================================
# Additional environment variables for development
# These are automatically set by the application if not provided

# Example values for reference:
# NODE_ENV=development
# PORT=5000
# BASE_URL=http://localhost:5000
# FRONTEND_URL=http://localhost:5173
# CORS_ORIGIN=*

# =============================================================================
# SECURITY NOTES
# =============================================================================
# 1. Never commit actual API keys or secrets to version control
# 2. Use strong, randomly generated values for JWT_SECRET and API_INTERNAL_TOKEN
# 3. In production, set NODE_ENV=production
# 4. Use specific CORS_ORIGIN in production (not *)
# 5. Use environment-specific MongoDB URIs
# 6. Enable 2FA and use app passwords for email services
# 7. Regularly rotate API keys and secrets
# 8. Monitor API usage and set up billing alerts

# =============================================================================
# QUICK SETUP COMMANDS
# =============================================================================
# Generate JWT Secret:
# node -e "console.log('JWT_SECRET=' + require('crypto').randomBytes(64).toString('hex'))"
#
# Generate Internal Token:
# node -e "console.log('API_INTERNAL_TOKEN=' + require('crypto').randomBytes(32).toString('hex'))"
#
# Test MongoDB connection:
# mongosh "your_mongo_uri_here"